@using AccountManager.Blazor.Components.Modals.SingleAccountModal.Pages.League
@using AccountManager.Blazor.Components.Modals.SingleAccountModal.Pages.Valorant
@using AccountManager.Blazor.Components.Modals.SingleAccountModal.Panels
@using AccountManager.Blazor.Components.Modals.SingleAccountModal.Panels.AccountDetailsPanels
@using AccountManager.Blazor.Components.Modals.SingleAccountModal.Panels.InfoPanels
@using AccountManager.Blazor.Components.Modals.SingleAccountModal.Pages.Steam
@using AccountManager.Core.Attributes
@using AccountManager.Core.Enums
@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using AccountManager.Core.Services
@using Blazorise.Charts
@using Microsoft.Extensions.Caching.Memory
@inject IAppState _state
@inject IAccountService _accountService
@inject IMemoryCache _memoryCache

<div class="modal fade show d-block" draggable="true" ondragstart="event.preventDefault(); event.stopPropagation();"  tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <button type="button" class="btn-close btn-close-white" @onclick="Close" aria-label="Close"></button>
            <div class="info-panel-container">
                <InfoPanel Account="Account" Pages="GetPages(Account.AccountType).ToList()"></InfoPanel>
            </div>
            <div class="account-details-panel">
                <DynamicComponent Type="GetAccountDetailsPanel(Account.AccountType)" Parameters="@(new Dictionary<string, object>(){ {"Account", Account} })"></DynamicComponent>
            </div>
	    </div>
	</div>
</div>

@code {
    [Parameter, EditorRequired]
    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    public Account Account { get; set; }
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

    [Parameter, EditorRequired]
    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    public EventCallback Close { get; set; }
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

    bool loginDisabled = false;
    string loginBtnStyle => loginDisabled ? "color:darkgrey; pointer-events: none;" : "";

    async Task Login()
    {
        if (loginDisabled)
            return;

        loginDisabled = true;
        await _accountService.Login(Account);
        loginDisabled = false;
    }

    public Type? GetInfoPanel(AccountType accountType)
    {
        return _memoryCache.GetOrCreate($"{nameof(SingleAccountInfoPanelAttribute)}.{Account.AccountType}.Pages", (entry) =>
        {
            return AppDomain.CurrentDomain.GetAssemblies()
                        .SelectMany(a => a.GetTypes().Where(t => t.IsDefined(typeof(SingleAccountInfoPanelAttribute), true)))
                        .ToDictionary((element) =>
                        {
                            return Attribute.GetCustomAttribute(element, typeof(SingleAccountInfoPanelAttribute)) as SingleAccountInfoPanelAttribute ?? new SingleAccountInfoPanelAttribute(0);
                        })
                        .Where((kvp) => kvp.Key?.AccountType == Account.AccountType)
                        .Select((kvp) => kvp.Value)
                        .Single();
        });
    }

    public IEnumerable<Type> GetPages(AccountType accountType)
    {
        return _memoryCache.GetOrCreate($"{nameof(SingleAccountPageAttribute)}.{Account.AccountType}.Pages", (entry) =>
        {
            return AppDomain.CurrentDomain.GetAssemblies()
                        .SelectMany(a => a.GetTypes().Where(t => t.IsDefined(typeof(SingleAccountPageAttribute), true)))
                        .ToDictionary((element) =>
                        {
                            return Attribute.GetCustomAttribute(element, typeof(SingleAccountPageAttribute)) as SingleAccountPageAttribute ?? new SingleAccountPageAttribute("Data", 0);
                        })
                        .Where((kvp) => kvp.Key?.AccountType == Account.AccountType)
                        .OrderBy((kvp) => kvp.Key?.OrderNumber ?? 0)
                        .Select((kvp) => kvp.Value)
                        .ToList();
        }) ?? new();
    }

    public Type? GetAccountDetailsPanel(AccountType accountType)
    {
        return _memoryCache.GetOrCreate($"{nameof(SingleAccountInfoPanelAttribute)}.{Account.AccountType}.AccountDetailsPanel", (entry) =>
        {
            return AppDomain.CurrentDomain.GetAssemblies()
                        .SelectMany(a => a.GetTypes().Where(t => t.IsDefined(typeof(SingleAccountInfoPanelAttribute), true)))
                        .FirstOrDefault((type) => (Attribute.GetCustomAttribute(type, typeof(SingleAccountInfoPanelAttribute)) as SingleAccountInfoPanelAttribute)?.AccountType == Account.AccountType);
        }) ?? null;
    }
}
