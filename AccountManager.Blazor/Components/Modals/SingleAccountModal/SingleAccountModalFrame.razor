@using AccountManager.Blazor.Components.Modals.SingleAccountModal.Pages.League
@using AccountManager.Blazor.Components.Modals.SingleAccountModal.Pages.Valorant
@using AccountManager.Blazor.Components.Modals.SingleAccountModal.Panels
@using AccountManager.Blazor.Components.Modals.SingleAccountModal.Panels.AccountDetailsPanels
@using AccountManager.Blazor.Components.Modals.SingleAccountModal.Panels.InfoPanels
@using AccountManager.Blazor.Components.Modals.SingleAccountModal.Pages.Steam
@using AccountManager.Core.Attributes
@using AccountManager.Core.Enums
@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using AccountManager.Core.Services
@using Blazorise.Charts
@using Microsoft.Extensions.Caching.Memory
@inject IAppState _state
@inject IAccountService _accountService
@inject IMemoryCache _memoryCache

<div class="modal fade show d-block" draggable="true" ondragstart="event.preventDefault(); event.stopPropagation();"  tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <button type="button" class="btn-close btn-close-white" @onclick="Close" aria-label="Close"></button>
            @if (Account is not null){
                <CascadingValue Value="Account">
                    <div class="info-panel-container">
                        <InfoPanel Pages="GetPages(Account.AccountType).ToList()"></InfoPanel>
                    </div>
                    <div class="account-details-panel">
                            <DynamicComponent Type="GetAccountDetailsPanel(Account.AccountType)"></DynamicComponent>
                    </div>
                </CascadingValue>
            }
	    </div>
	</div>
</div>

@code {
    [CascadingParameter, EditorRequired]
    public Account? Account { get; set; }

    [Parameter, EditorRequired]
    public EventCallback Close { get; set; }

    bool loginDisabled = false;
    string loginBtnStyle => loginDisabled ? "color:darkgrey; pointer-events: none;" : "";

    async Task Login()
    {
        if (loginDisabled || Account is null)
            return;

        loginDisabled = true;
        await _accountService.LoginAsync(Account);
        loginDisabled = false;
    }

    public Type? GetInfoPanel(AccountType accountType)
    {
        if (Account is null)
            return null;

        return _memoryCache.GetOrCreate($"{nameof(SingleAccountInfoPanelAttribute)}.{Account.AccountType}.Pages", (entry) =>
        {
            return AppDomain.CurrentDomain.GetAssemblies()
                        .SelectMany(a => a.GetTypes().Where(t => t.IsDefined(typeof(SingleAccountInfoPanelAttribute), true)))
                        .ToDictionary((element) =>
                        {
                            return Attribute.GetCustomAttribute(element, typeof(SingleAccountInfoPanelAttribute)) as SingleAccountInfoPanelAttribute ?? new SingleAccountInfoPanelAttribute(0);
                        })
                        .Where((kvp) => kvp.Key?.AccountType == Account.AccountType)
                        .Select((kvp) => kvp.Value)
                        .Single();
        });
    }

    public IEnumerable<Type> GetPages(AccountType accountType)
    {
        return _memoryCache.GetOrCreate($"{nameof(SingleAccountPageAttribute)}.{Account?.AccountType}.Pages", (entry) =>
        {
            return AppDomain.CurrentDomain.GetAssemblies()
            .SelectMany(a => a.GetTypes().Where(t => t.IsDefined(typeof(SingleAccountPageAttribute), true)))
            .SelectMany(type => Attribute.GetCustomAttributes(type, typeof(SingleAccountPageAttribute))
            .Cast<SingleAccountPageAttribute>()
            .Select(attr => new { Attribute = attr, Type = type }))
            .Where(entry => entry.Attribute.AccountType == Account?.AccountType)
            .OrderBy(entry => entry.Attribute.OrderNumber)
            .Select(entry => entry.Type)
            .ToList();
        }) ?? new();
    }

    public Type? GetAccountDetailsPanel(AccountType accountType)
    {
        if (Account is null)
            return null;

        return _memoryCache.GetOrCreate($"{nameof(SingleAccountInfoPanelAttribute)}.{Account.AccountType}.AccountDetailsPanel", (entry) =>
        {
            return AppDomain.CurrentDomain.GetAssemblies()
                .SelectMany(assembly => assembly.GetTypes())
                .FirstOrDefault(type => type.GetCustomAttributes(typeof(SingleAccountInfoPanelAttribute), true)
                .OfType<SingleAccountInfoPanelAttribute>()
                .Any(attr => attr.AccountType == Account.AccountType));
        }) ?? null;
    }
}
