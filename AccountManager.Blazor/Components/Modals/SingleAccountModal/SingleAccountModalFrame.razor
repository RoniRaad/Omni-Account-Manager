@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using AccountManager.Core.Services
@using Blazorise.Charts
@inject AppState _state
@inject IAccountService _accountService

<div style="z-index:100000" class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document" style="max-width: 91vw;">
        <div class="modal-content" style="/* width: 80vw; */height: 90vh;flex-direction: row;">
            <div class="" style="width: 70%;height: 100%;">
                <AccountManager.Blazor.Components.Modals.SingleAccountModal.Pages.Valorant.ValorantGraphPage Account="Account"></AccountManager.Blazor.Components.Modals.SingleAccountModal.Pages.Valorant.ValorantGraphPage>
            </div>
            <div class="" style="width: 30%;background-color: #303030;height: 100%;display: flex;flex-direction: column;align-content: center;gap: 35px;align-items: center;justify-content: flex-start;">
                <AccountManager.Blazor.Components.Modals.SingleAccountModal.Panels.ValorantPanel Account="Account"></AccountManager.Blazor.Components.Modals.SingleAccountModal.Panels.ValorantPanel>
            </div>
	    </div>
	</div>
</div>

@code {
    [Parameter, EditorRequired]
    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            public Account Account { get; set; }
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    
    bool loginDisabled = false;
    string loginBtnStyle => loginDisabled ? "color:darkgrey; pointer-events: none;" : "";

	public void Close(){

	}

    async Task Login()
    {
        if (loginDisabled)
            return;

        loginDisabled = true;
        await _accountService.Login(Account);
        loginDisabled = false;
    }
    
}
