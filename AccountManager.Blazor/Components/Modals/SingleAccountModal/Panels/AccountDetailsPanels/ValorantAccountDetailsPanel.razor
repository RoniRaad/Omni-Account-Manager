@attribute [SingleAccountInfoPanel(Core.Enums.AccountType.Riot)]
@attribute [SingleAccountInfoPanel(Core.Enums.AccountType.Valorant)]
@using AccountManager.Core.Attributes
@using AccountManager.Core.Enums
@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@inject IGenericFactory<AccountType, IPlatformService> _platformServiceFactory
 <div class="title-container">
    <h2 class="" style="">Valorant</h2>
</div>
<div class="account-details-container">
    <div class="account-details-sub-container">
        <div class="mb-3 row">
            <label for="staticEmail" class="col-5 col-form-label">Name</label>
            <div class="col-7">
                <input type="text" readonly="" class="form-control-plaintext" value="@Account?.Name">
            </div>
        </div>
        <div class="mb-3 row">
            <label for="staticEmail" class="col-5 col-form-label">Username</label>
            <div class="col-7">
                <input type="text" readonly="" class="form-control-plaintext" value="@Account?.Username">
            </div>
        </div>
        <div class="mb-3 row">
            <label for="staticEmail" class="col-5 col-form-label">Rank</label>
            <div class="col-7">
                <input type="text" readonly="" class="form-control-plaintext" value="@Rank?.Tier @Rank?.Ranking">
            </div>
        </div>
        <div class="mb-3 row">
            <label for="staticEmail" class="col-5 col-form-label">Password</label>
            <div class="col-7" style="display:flex; justify-content:flex-end">
                <input type="@PasswordType" style="width: 60%;" readonly="" value="@Account?.Password" class="form-control-plaintext"  />
                    <div class="input-group-append">
                        <span @onclick="()=> passwordVisible = !passwordVisible" class="btn btn-outline-secondary oi-eye btn-password-show" style="color: @PasswordToggleButtonColor;" type="button"></span>
                    </div>
            </div>
        </div>
    </div>
</div>
@code {
    [CascadingParameter]
    public Account? Account { get; set; }

    public Rank? Rank { get; set; }

    private IPlatformService? _platformService;
    private bool passwordVisible = false;
    private Account? _account = null;

    protected override void OnInitialized()
    {
        if (Account is null || _platformService is null)
            return;

        _platformService = _platformServiceFactory.CreateImplementation(Account.AccountType);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_account == Account || Account is null || _platformService is null)
            return;

        _account = Account;
        var rankResponse = await _platformService.TryFetchRank(Account);
        Rank = rankResponse.Item2;
        await InvokeAsync(() => StateHasChanged());
    }

    public string PasswordType
    {
        get { return passwordVisible ? "" : "password"; }
    }
    public string PasswordToggleButtonColor
    {
        get { return passwordVisible ? "#ababab;" : "#525252;"; }
    }
}
