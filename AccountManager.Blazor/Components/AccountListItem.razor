@using AccountManager.Blazor.Components.AccountListTile
@using AccountManager.Blazor.Components.AccountListTile.TileContent
@using AccountManager.Blazor.Components.Modals
@using AccountManager.Blazor.Components.Modals.SingleAccountModal
@using AccountManager.Core.Enums
@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using AccountManager.Core.Services
@using AccountManager.Core.Static
@using Blazorise
@using Blazorise.Charts
@using Blazorise.Charts.Trendline
@using System.Drawing
@inject AppState _state
@inject ILeagueGraphService _leagueGraphService
@inject IValorantGraphService _valorantGraphService
@inject ITeamFightTacticsGraphService _tftGraphService
@inherits LayoutComponentBase

<div class="card" style="@cardStyle">
    <div class="card-body" @onmouseout="() => cardIsHovered = false" @onmouseover="() => cardIsHovered = true" @onclick="OpenSingleAccountModal" >
        <TileTopBar Title="@Account?.Id" AccountType="@(Account?.AccountType ?? 0)" MouseEnterDragLogo="() => dragSymbolIsHovered = true" MouseExitDragLogo="() => dragSymbolIsHovered = false" ></TileTopBar>
    </div>
	<ul class="list-group list-group-flush" @onmouseout="() => cardIsHovered = false" @onmouseover="() => cardIsHovered = true" @onclick="OpenSingleAccountModal">
		<TileContent Account="Account" MouseEnterGraph="() => graphIsHovered = true" MouseExitGraph="() => graphIsHovered = false"></TileContent>
	</ul>
	<div class="container account-btn-container">
	    <div class="row">
		    <div class="col">
                <span @onclick=Delete class="oi oi-trash" title="Delete" ></span>
            </div>
		    <div class="col">
		        <span @onclick="() => OpenEditModal()" class="oi oi-wrench" title="Edit"></span>
		    </div>
		    <div class="col">
		        <span @onclick="Login" class="oi oi-media-play" title="Login" style="@loginBtnStyle"></span>
		    </div>
	    </div>
	</div>
</div>

@if (deleteAccountConfirmationRequest is not null)
{
    <ConfirmationPrompt Request="deleteAccountConfirmationRequest"></ConfirmationPrompt>
}

@if (showFullTile)
{
    <SingleAccountModalFrame Account="Account" Close="() => showFullTile = false"></SingleAccountModalFrame>
}

@code {
    private bool graphIsHovered = false;
    private bool cardIsHovered = false;
    private bool dragSymbolIsHovered = false;
    private string cardStyle
    {
        get
        {
            if (graphIsHovered || dragSymbolIsHovered || !cardIsHovered
                || Account.AccountType == AccountType.TeamFightTactics 
                || Account.AccountType == AccountType.Steam)
                return "";

            return "box-shadow: 0px 0px 6px #424040; cursor: pointer;";
        }
    }

    private void OpenSingleAccountModal()
    {
        if (cardStyle == "")
            return;
            
        showFullTile = true;
    }


    private bool showFullTile = false;
}