@using AccountManager.Core.Enums
@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using Blazorise.Charts

@inherits LayoutComponentBase
<div class="card" style="width: 18rem;color: white;margin: 10px;background-color: #292929;width: 30%;">
  
    <div class="card-body" style="/* padding: 1rem 1rem; */padding-bottom: 0.2rem;">
        <h6 class="card-title" style="text-align: center;">@Account?.Id</h6>
    </div>
	<ul class="list-group list-group-flush" style="/* background-color: black; */">
		<li class="list-group-item" style="background-color: #444444;color: white;">
            <div>
                <p style="text-align: center;font-size: 12px;">@Account?.Username</p>
					@if (Account?.Rank?.Tier is null && Account?.Rank?.Ranking is null){
						<p style="text-align: center;font-size: 12px;">N/A</p>
					}
					else
					{
						<p style="text-align: center;font-size: 12px; color:@Account?.Rank?.Color">@Account?.Rank?.Tier @Account?.Rank?.Ranking</p>
					}
                    <div style="">
                        <LineChart @ref="lineChart" TItem="double" />
                    </div>  
            </div>
        </li>
	</ul>
	<div class="container" style="text-align: center;">
	    <div class="row">
		    <div class="col-sm">
                <span @onclick=Delete class="oi oi-trash" title="Delete" ></span>
            </div>
		    <div class="col-sm">
		        <span @onclick="() => {EditPrompt=true; InvokeAsync(() => StateHasChanged());}" class="oi oi-wrench" title="Edit"></span>
		    </div>
		    <div class="col-sm">
		        <span @onclick="() => AccountService.Login(Account)" class="oi oi-account-login" title="Login"></span>
		    </div>
	    </div>
	</div>
</div>
@if (EditPrompt)
{
    <AccountEditModal Account="Account" AccountService="AccountService" Close="() => {EditPrompt = false; ReloadList();}"></AccountEditModal>
}

@code{
    LineChart<double> lineChart;

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await lineChart.Clear();

        await lineChart.AddLabelsDatasetsAndUpdate( Labels, GetLineChartDataset() );
        lineChart.Options = new()
            {
                MaintainAspectRatio = false,
            };
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "SILVER LP",
            Data = RandomizeData(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            Fill = true,
            PointRadius = 3,
            CubicInterpolationMode = "monotone",
        };
    }

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

    List<double> RandomizeData()
    {
        var r = new Random( DateTime.Now.Millisecond );

        return new List<double> { 
            30,
            45,
            31,
            20,
            15,
            24
        };
    }
}