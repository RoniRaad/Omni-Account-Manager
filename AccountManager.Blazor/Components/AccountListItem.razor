@using AccountManager.Core.Enums
@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using Blazorise.Charts
@using Blazorise.Charts.Trendline

@inherits LayoutComponentBase
<div class="col-md-4 col-sm-6 col-xxl-2">
    <div class="card" style="color: white;margin: 10px;background-color: #292929;">
        <div class="card-body" style="display: flex;align-items: center;padding: 10px;justify-content:space-between">
            <div style="background-color: #1d1d1d;width: fit-content;padding: 3px;border-radius: 6px;">
                @if (Account.AccountType == Core.Enums.AccountType.League)
                {
                    <img src="./logos/league-logo.png" class="game-logo" />
                }
                else if (Account.AccountType == Core.Enums.AccountType.TFT)
                {
                    <img src="./logos/tft-logo.png" class="game-logo" />
                }
                else if (Account.AccountType == Core.Enums.AccountType.Steam)
                {
                    <div class="game-logo">
                        <svg xmlns="http://www.w3.org/2000/svg" height="34px" width="34px" class="game-logo-svg" version="1.1" viewBox="0 0 233 233">
                            <defs>
                            <linearGradient id="a" x2="50%" x1="50%" y2="100%">
                            <stop stop-color="#111D2E" offset="0"/>
                            <stop stop-color="#051839" offset=".21248"/>
                            <stop stop-color="#0A1B48" offset=".40695"/>
                            <stop stop-color="#132E62" offset=".58110"/>
                            <stop stop-color="#144B7E" offset=".73760"/>
                            <stop stop-color="#136497" offset=".87279"/>
                            <stop stop-color="#1387B8" offset="1"/>
                            </linearGradient>
                            </defs>
                            <path fill="url(#a)" d="m4.8911 150.01c14.393 48.01 58.916 82.99 111.61 82.99 64.34 0 116.5-52.16 116.5-116.5 0-64.341-52.16-116.5-116.5-116.5-61.741 0-112.26 48.029-116.25 108.76 7.5391 12.66 10.481 20.49 4.6411 41.25z"/>
                            <path fill="#fff" d="m110.5 87.322c0 0.196 0 0.392 0.01 0.576l-28.508 41.412c-4.618-0.21-9.252 0.6-13.646 2.41-1.937 0.79-3.752 1.76-5.455 2.88l-62.599-25.77c0.00049 0-1.4485 23.83 4.588 41.59l44.254 18.26c2.222 9.93 9.034 18.64 19.084 22.83 16.443 6.87 35.402-0.96 42.242-17.41 1.78-4.3 2.61-8.81 2.49-13.31l40.79-29.15c0.33 0.01 0.67 0.02 1 0.02 24.41 0 44.25-19.9 44.25-44.338 0-24.44-19.84-44.322-44.25-44.322-24.4 0-44.25 19.882-44.25 44.322zm-6.84 83.918c-5.294 12.71-19.9 18.74-32.596 13.45-5.857-2.44-10.279-6.91-12.83-12.24l14.405 5.97c9.363 3.9 20.105-0.54 23.997-9.9 3.904-9.37-0.525-20.13-9.883-24.03l-14.891-6.17c5.746-2.18 12.278-2.26 18.381 0.28 6.153 2.56 10.927 7.38 13.457 13.54s2.52 12.96-0.04 19.1m51.09-54.38c-16.25 0-29.48-13.25-29.48-29.538 0-16.275 13.23-29.529 29.48-29.529 16.26 0 29.49 13.254 29.49 29.529 0 16.288-13.23 29.538-29.49 29.538m-22.09-29.583c0-12.253 9.92-22.191 22.14-22.191 12.23 0 22.15 9.938 22.15 22.191 0 12.254-9.92 22.183-22.15 22.183-12.22 0-22.14-9.929-22.14-22.183z"/>
                        </svg>
                    </div>
                }
                else if (Account.AccountType == Core.Enums.AccountType.Valorant)
                {
                    <div class="game-logo">
                        <svg class="game-logo-svg" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px"
                            width="27" height="27"
                            viewBox="0 0 24 24"
                            style="fill:#ff4654;"><path d="M1.756 5.345C1.482 5.029 1.042 4.915.65 5.063.259 5.209 0 5.583 0 6v7c0 .242.088.477.248.658l7 8C7.438 21.876 7.711 22 8 22h6c.392 0 .747-.229.91-.585.163-.355.103-.774-.154-1.07L1.756 5.345zM23.325 6.054c-.404-.138-.852-.005-1.114.332l-7 9c-.234.302-.276.711-.109 1.054C15.27 16.782 15.618 17 16 17h5c.334 0 .646-.167.832-.445l2-3C23.941 13.391 24 13.197 24 13V7C24 6.573 23.729 6.192 23.325 6.054z"></path></svg>
                    </div>
                }
            </div>
            <h5 class="card-title" style="text-align: center;margin: 0px;padding: 0px;margin-left: 7px;">@Account?.Id</h5>
            <div style="width: 40px;"><!--this is a spacer!--></div>
        </div>
	    <ul class="list-group list-group-flush" style="/* background-color: black; */">
		    <li class="list-group-item" style="background-color: #444444;color: white;">
                <div>
                    <p style="text-align: center;font-size: 12px;">@Account?.Username</p>
					    @if (Account?.Rank?.Tier is null && Account?.Rank?.Ranking is null){
						    <p style="text-align: center;font-size: 12px;">N/A</p>
					    }
					    else
					    {
						    <p style="text-align: center;font-size: 12px; color:@Account?.Rank?.Color">@Account?.Rank?.Tier @Account?.Rank?.Ranking</p>
					    }
                        <div style="">
                            <LineChart Options="lineChartOptions" @ref="lineChart" TItem="CoordinatePair">   
                                <ChartTrendline @ref="chartTrendline" TItem="double?" />
                            </LineChart>
                        </div>  
                </div>
            </li>
	    </ul>
	    <div class="container" style="text-align: center;">
	        <div class="row">
		        <div class="col-sm">
                    <span @onclick=Delete class="oi oi-trash" title="Delete" ></span>
                </div>
		        <div class="col-sm">
		            <span @onclick="() => {EditPrompt=true; InvokeAsync(() => StateHasChanged());}" class="oi oi-wrench" title="Edit"></span>
		        </div>
		        <div class="col-sm">
		            <span @onclick="() => AccountService.Login(Account)" class="oi oi-account-login" title="Login"></span>
		        </div>
	        </div>
	    </div>
    </div>
</div>
@if (EditPrompt)
{
    <AccountEditModal Account="Account" AccountService="AccountService" Close="() => {EditPrompt = false; ReloadList();}"></AccountEditModal>
}

@code{
    LineChart<CoordinatePair>? lineChart;
    ChartTrendline<double?>? chartTrendline;
    LineChartOptions lineChartOptions = new()
        {
            MaintainAspectRatio = false,
            Scales = new()
            {
                X = new()
                {
                    Ticks = new()
                    {
                        Font = new()
                        {
                            Family = "Roboto",
                            Size = 10
                        },
                            
                            
                    },
                    Title = new()
                    {
                        Font = new()
                        {
                            Family = "Roboto",
                            Size = 10
                        }
                    },
                    Time = new()
                    {
                        Unit = "day",
                    },
                    Type = "timeseries",
                },
                Y = new()
                {
                    Ticks = new()
                    {
                        Font = new()
                        {
                            Family = "Roboto",
                            Size = 10
                        }
                    },
                    Title = new()
                    {
                        Font = new()
                        {
                            Family = "Roboto",
                            Size = 10
                        }
                    }
                },
            },
            Plugins = new(){
                Legend = new()
                {
                    Labels = new()
                    {
                        Font = new()
                        {
                            Family = "Roboto",
                            Size = 10
                        },
                        BoxHeight = 10,
                        BoxWidth = 16
                    },
                }
            }
        };

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        if (lineChart is null)
            return;

        await lineChart.Clear();
        var datasets = Account?.Graphs;
        if (datasets is null)
            return;

        foreach (var dataset in datasets)
        {
            var data = new LineChartDataset<CoordinatePair>
            {
                Label = dataset.Label,
                Data = dataset.Data,
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = false,
                PointRadius = 3,
            };

            await lineChart.AddDatasetsAndUpdate(data);
        }
    }


    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };
}