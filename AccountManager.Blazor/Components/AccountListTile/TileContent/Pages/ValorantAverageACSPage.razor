@using AccountManager.Core.Enums
@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using AccountManager.Core.Services
@using Blazorise.Charts
@inject AppState _state
@inject IValorantGraphService _valorantGraphService

<BarChart @ref="barChart" Options="barChartOptions" TItem="double?"></BarChart>

@code {
    [Parameter]
    public Account Account { get; set; }

   BarChart<double?>? barChart;
    BarChartOptions barChartOptions = new()
    {
        MaintainAspectRatio = false,
        Plugins = new()
        {
            Legend = new()
            {
                Display = false,
                Labels = new()
                {
                    Font = new()
                    {
                        Family = "Roboto",
                        Size = 10
                    },
                    BoxHeight = 10,
                    BoxWidth = 16
                },
            },
            Title = new()
            {
                Font = new()
                    {
                        Family = "Roboto",
                        Size = 10
                    },
                Display = true,
                Position = "top"
            }
        },
        Scales = new()
        {
            X = new()
            {
                BeginAtZero = true,
            },
            Y = new()
            {
                Ticks = new()
                {
                    
                }    
            }
        },
        
    };

    async Task HandleRedraw()
    {
        barChart?.Clear();

        if (barChart is null)
            return;

        var datasets = displayGraph;

        if (datasets?.Data is null)
            return;

        var chartDatasets = new BarChartDataset<double?>
        {
            Data = datasets?.Data?.Select((data) => data.Value).ToList(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            BorderWidth = 1,
            Label = datasets?.Title,
            SkipNull = false
        };

        await barChart.AddLabelsDatasetsAndUpdate(datasets?.Labels, chartDatasets);
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {

        if (first)
        {
            _state.UpdateGraphs += async () =>
            {
                displayGraph = await _valorantGraphService.GetRankedACS(Account);
                await HandleRedraw();
            };

            displayGraph = await _valorantGraphService.GetRankedACS(Account);
            barChartOptions.Plugins.Title.Text = displayGraph?.Title;
            await HandleRedraw();
        }
    }
    private bool showFullTile = false;
    BarChart? displayGraph;

    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

}