@using AccountManager.Blazor.Components.AccountListTile
@using AccountManager.Blazor.Components.AccountListTile.TileContent
@using AccountManager.Blazor.Components.Modals
@using AccountManager.Blazor.Components.Modals.SingleAccountModal
@using AccountManager.Core.Enums
@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using AccountManager.Core.Models.UserSettings
@using AccountManager.Core.Services
@using AccountManager.Core.Static
@using Blazorise
@using Blazorise.Charts
@using Blazorise.Charts.Trendline
@using System.Drawing
@inject IAppState _state
@inject ILeagueGraphService _leagueGraphService
@inject IValorantGraphService _valorantGraphService
@inject ITeamFightTacticsGraphService _tftGraphService
@inject IUserSettingsService<Dictionary<Guid, AccountListItemSettings>> _accountItemSettings
@inject IAccountService _accountService
@inherits LayoutComponentBase

<CascadingValue Value="_settings">
    <div class="card" style="@cardStyle">
        <div class="card-body" @onmouseout="() => cardIsHovered = false" @onmouseover="() => cardIsHovered = true" @onclick="OpenSingleAccountModal" >
            <TileTopBar Title="@Account?.Name" AccountType="@(Account?.AccountType ?? 0)" MouseEnterDragLogo="() => dragSymbolIsHovered = true" MouseExitDragLogo="() => dragSymbolIsHovered = false" ></TileTopBar>
        </div>
	    <ul class="list-group list-group-flush" @onmouseout="() => cardIsHovered = false" @onmouseover="() => cardIsHovered = true" @onclick="OpenSingleAccountModal">
		    <TileContent Account="Account" MouseEnterGraph="() => graphIsHovered = true" MouseExitGraph="() => graphIsHovered = false"></TileContent>
	    </ul>
	    <div class="container account-btn-container">
            <ButtonContainer Account="Account" OpenEditModal="OpenEditModal" ReloadList="ReloadList" ></ButtonContainer>
	    </div>
    </div>
</CascadingValue>


@if (showFullTile)
{
    <SingleAccountModalFrame Account="Account" Close="() => {showFullTile = false; InvokeAsync(() => StateHasChanged());}"></SingleAccountModalFrame>
}

