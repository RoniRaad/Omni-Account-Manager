@using AccountManager.Blazor.Components.AccountListTile
@using AccountManager.Blazor.Components.AccountListTile.TileContent
@using AccountManager.Blazor.Components.Modals
@using AccountManager.Blazor.Components.Modals.SingleAccountModal
@using AccountManager.Core.Enums
@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using AccountManager.Core.Models.UserSettings
@using AccountManager.Core.Services
@using AccountManager.Core.Static
@using Blazorise
@using Blazorise.Charts
@using Blazorise.Charts.Trendline
@using System.Drawing
@inject IAppState _state
@inject ILeagueGraphService _leagueGraphService
@inject IValorantGraphService _valorantGraphService
@inject ITeamFightTacticsGraphService _tftGraphService
@inject IUserSettingsService<Dictionary<Guid, AccountListItemSettings>> _accountItemSettings
@inject IAccountService _accountService
@inherits LayoutComponentBase

<CascadingValue Value="Account">
    <CascadingValue Value="_settings">
        <div @onmouseleave="(e) => CardUnHovered()" @onmouseenter="(e) => CardHovered()" class="card" style="@cardStyle">
            <div class="card-body" @onclick="OpenSingleAccountModal">
                <TileTopBar></TileTopBar>
            </div>
            <ul @onmouseleave="(e) => CardHovered()" @onmouseenter="(e) => CardUnHovered()" class="list-group list-group-flush" @onclick="OpenSingleAccountModal">
		        <TileContent></TileContent>
	        </ul>
	        <div class="container account-btn-container">
                <ButtonContainer OpenEditModal="OpenEditModal" ReloadList="ReloadList" ></ButtonContainer>
	        </div>
        </div>
        </CascadingValue>
</CascadingValue>


@if (showFullTile)
{
    <SingleAccountModalFrame Account="Account" Close="() => {showFullTile = false; InvokeAsync(() => StateHasChanged());}"></SingleAccountModalFrame>
}

