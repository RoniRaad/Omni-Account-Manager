@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using Blazorise.Charts
@using AccountManager.Core.Services
@inject IAppState _state

@if (BarChart is null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (BarChart?.Data?.Any() is not true)
{
    <h3>No Data</h3>
}
else{
    <BarChart Options="barChartOptions" @ref="barChart" TItem="double?"/>   
}

@code {
    [Parameter, EditorRequired]
    public BarChart BarChart { get; set; }

    BarChart<double?>? barChart;
    BarChartOptions barChartOptions = new()
    {
        MaintainAspectRatio = false,
        Plugins = new()
        {
            Legend = new()
            {
                Display = false,
                Labels = new()
                {
                    Font = new()
                    {
                        Family = "Roboto",
                        Size = 10
                    },
                    BoxHeight = 10,
                    BoxWidth = 16
                },
            },
            Title = new()
            {
                Font = new()
                    {
                        Family = "Roboto",
                        Size = 10
                    },
                Display = true,
                Position = "top"
            }
        },
        Scales = new()
        {
            X = new()
            {
                BeginAtZero = true,
            },
            Y = new()
            {
                Ticks = new()
                {
                    
                }    
            }
        },
        
    };

    async Task HandleRedraw()
    {
        barChart?.Clear();

        if (barChart is null)
            return;

        var datasets = BarChart;
        if (datasets is null)
            return;

        var chartDatasets = new BarChartDataset<double?>
        {
            Data = datasets.Data.Select((data) => data.Value).ToList(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            BorderWidth = 1,
            Label = datasets.Title,
            SkipNull = false
        };

        await barChart.AddLabelsDatasetsAndUpdate(datasets.Labels, chartDatasets);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
            barChartOptions.Plugins.Title.Text = BarChart?.Title;
            if (!string.IsNullOrEmpty(BarChart?.Type))
                barChartOptions.Scales.Y.Ticks.Format = new
                    {
                        style = BarChart?.Type
                    };

            await HandleRedraw();
    }

    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };
}
