@using AccountManager.Blazor.Components.Modals
@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using AccountManager.Core.Models.AppSettings
@using AccountManager.Core.Models.UserSettings
@using AccountManager.Core.Services
@using AccountManager.Blazor.Components
@using Microsoft.Extensions.Options
@inject IAppState _authService
@inject IUserSettingsService<LeagueSettings> _settings
@inject IAppState _state

<div class="container main">
    <EditForm Model="@_settings.Settings">
        <DataAnnotationsValidator />
        <table>
            <tbody>
                <tr>
                    <th scope="row">
                        <p >Use account credentials to get current ranking</p>
                    </th>
                    <td>
                        <div class="form-check">
                            <input type="checkbox" @onchange="(ChangeEventArgs e) => {
                                _settings.Settings.UseAccountCredentials = (bool)(e?.Value ?? true); 
                                _settings.SaveAsync();
                            }" id="credentialsCheckBox" checked="@_settings.Settings.UseAccountCredentials"></input>
                            <label class="form-check-label" for="credentialsCheckBox">
                                Use credentials
                            </label>
                        </div>
                    </td>
                </tr>
                <tr>
                    <th scope="row">
                        <p>Account credentials to use for data retrieval</p>
                    </th>
                    <td>
                        <label>
                            <select class="form-select" @onchange="AccountCredentialsChanged">
                                @foreach (var acc in _state.Accounts.Where((acc) => acc.AccountType == Core.Enums.AccountType.League))
                                {
                                    <option value="@acc.Id" selected="@(_settings.Settings.AccountToUseCredentials == acc.Id)" >@acc.Name</option>
                                }
                            </select>
                        </label>
                    </td>
                </tr>
                <tr>
                    <th scope="row">
                        <p>Amount of matches to display on graphs (1-40)</p>
                    </th>
                    <td>
                        <InputNumber min="1" max="40" class="number-input form-control" @bind-Value="_settings.Settings.AmountOfMatchesForGraphs"></InputNumber>
                        <span class="btn-text-save btn btn-dark" @onclick=SaveAmountOfMatches type="submit">Save</span>
                    </td>
                </tr>
            </tbody>
        </table>
    </EditForm>
</div>

@code {
    protected override Task OnInitializedAsync()
    {
        if (_settings.Settings.AccountToUseCredentials is null)
        {
            _settings.Settings.AccountToUseCredentials = _state?.Accounts?.FirstOrDefault((acc) => acc.AccountType == Core.Enums.AccountType.League)?.Id;
        }

        return base.OnInitializedAsync();
    }

    public async Task AccountCredentialsChanged(ChangeEventArgs args)
    {
        if (args.Value is string)
            if (Guid.TryParse(args.Value as string, out Guid selectedGuid))
                _settings.Settings.AccountToUseCredentials = selectedGuid;

        await _settings.SaveAsync();
    }

    private async Task SaveAmountOfMatches()
    {
        if (_settings.Settings.AmountOfMatchesForGraphs <= 40 && _settings.Settings.AmountOfMatchesForGraphs >= 1)
            await _settings.SaveAsync();
    }
}