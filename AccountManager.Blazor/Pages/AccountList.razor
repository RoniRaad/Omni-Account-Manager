@page "/accountlist"
@using AccountManager.Blazor.Components
@using AccountManager.Blazor.Components.AccountListTile
@using AccountManager.Blazor.Components.Modals
@using AccountManager.Blazor.Components.Modals.ImportExportAccountModal
@using AccountManager.Core.Enums
@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using AccountManager.Core.Services
@using AccountManager.Infrastructure.Services
@using Microsoft.Extensions.Caching.Memory
@inject IAccountService _accountService
@inject IMemoryCache _memoryCache
@inject IAppState _appState
@inject IAccountFilterService _accountFilterService
@inject IAlertService _alertService
@inject IJSRuntime _jsRuntime
@namespace AccountManager.Blazor.Pages
<div class="container-fluid">
    @if (_appState.Accounts is null)
    {
        <div class="row" style="--bs-gutter-x: 0rem">
            <div class="display-content">
                @for (int i = 0; i < 6; i++)
                {
                    <PlaceholderAccountListTile></PlaceholderAccountListTile>
                }
            </div>
        </div>
    }

    <div class="row" style="--bs-gutter-x: 0rem">
        @try
        {
            <Dropzone Id="accounts-grid" Class="display-content" OnItemDrop="OnDrop" ItemWrapperClass="AccountListItemClass" Items="_appState?.Accounts ?? new()" TItem="Account">
                <CascadingValue Value="@context">
                    <AccountListTile @key="@context.Id" ReloadList="() => LoadList()" RenderButtons="false" OpenEditModal="OpenEditModal"></AccountListTile>
                </CascadingValue>
            </Dropzone>
        }
        catch{}

        <div title="@amountOfAccountsFilered accounts filtered" style="@(amountOfAccountsFilered > 0 ? "" : "display:none")" id="filter-indicator" class="filter-indicator">
            <div class="card filter-indicator-card">
                <ul class="list-group list-group-flush">
                    <li class="inner-card list-group-item list-group-item-placeholder">
                        <div class="list-item-placeholder-div">
                            <p style="font-family: Roboto;">+@(amountOfAccountsFilered)</p>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        

        <div id="new-account-placeholder" style="display:none" class="placeholder-account-tile">
            <div class="card card-placeholder">
                <ul class="list-group list-group-flush">
                    <li @onclick="()=>addAccountPrompt=true" class="inner-card clickable-card list-group-item list-group-item-placeholder">
                        <div class="list-item-placeholder-div">
                            <p>+</p>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

@if (addAccountPrompt)
{
    <NewAccountModal Close="() => {addAccountPrompt=false; InvokeAsync(()=>StateHasChanged()); LoadList();}"></NewAccountModal>
}

@if (editAccountTarget is not null)
{
    <AccountEditModal Account="editAccountTarget" Close="() => {editAccountTarget = null; InvokeAsync(() => StateHasChanged());}"></AccountEditModal>
}