@page "/"
@using AccountManager.Blazor.Components
@using AccountManager.Core.Enums
@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using AccountManager.Core.Services
@using AccountManager.Infrastructure.Services
@using Microsoft.Extensions.Caching.Memory
@inject IAccountService _accountService
@inject IMemoryCache _memoryCache
@inject AppState _appState
@inject AlertService _alertSerivce
@namespace AccountManager.Blazor.Pages

<div class="container-fluid" style="padding-left:0px;padding-right:0px">
    @if (DragMode){
        <h6 style="text-align:center">Drag the accounts to reorder them.</h6>
    }
    <div class="row" style="--bs-gutter-x: 0rem">
        @if (!DragMode){
            @foreach (var account in _appState.Accounts)
            {
                <AccountListItem AccountService="_accountService" Account="account" ReloadList="() => LoadList()" RenderButtons="true"></AccountListItem>
            }
        }
        else{
            <Dropzone Items="_appState.Accounts" TItem="Account">
                    <AccountListItem AccountService="_accountService" Account="@context" ReloadList="() => LoadList()" RenderButtons="false" ></AccountListItem>
            </Dropzone>
        }
    </div>
    <button @onclick="()=>addAccountPrompt=true">Add Account</button>
</div>
@if (addAccountPrompt)
{
    <NewAccountPrompt AccountService="_accountService" Close="() => {addAccountPrompt=false; InvokeAsync(()=>StateHasChanged()); LoadList();}"></NewAccountPrompt>
}
