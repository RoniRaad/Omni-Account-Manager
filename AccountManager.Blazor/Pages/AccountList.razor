@page "/"
@using AccountManager.Blazor.Components
@using AccountManager.Core.Enums
@using AccountManager.Core.Interfaces
@using AccountManager.Core.Models
@using AccountManager.Core.Services
@using AccountManager.Infrastructure.Services
@using Microsoft.Extensions.Caching.Memory
@inject IAccountService _accountService
@inject IMemoryCache _memoryCache
@inject AppState _appState
@inject AlertService _alertSerivce
@namespace AccountManager.Blazor.Pages

<div class="container-fluid" style="padding-left:0px;padding-right:0px;margin-top: -12px;justify-content: space-between;">
    <div class="row" style="--bs-gutter-x: 0rem">
        <Dropzone Class="display-content" ItemWrapperClass="@(item => "col-md-4 col-sm-6 col-xxl-2 col-xxxl-2")" Items="_appState.Accounts" TItem="Account">
                <AccountListItem AccountService="_accountService" Account="@context" ReloadList="() => LoadList()" RenderButtons="false" OpenEditModal="() => {editAccountTarget = context; InvokeAsync(() => StateHasChanged());}" ></AccountListItem>
        </Dropzone>

        <div class="col-md-4 col-sm-6 col-xxl-2" >
            <div class="card" style="color: white;margin: 10px;border: 1px dashed grey;background-color:transparent ">
	            <ul class="list-group list-group-flush" style="">
                    <li @onclick="()=>addAccountPrompt=true" class="clickable-card list-group-item" style="color: white;height: 289.6px;">
                        <div style="width: 100%;height: 100%;display: flex;align-content: center;justify-content: center;align-items: center;">
                            <p style="font-family: none;font-size: 4rem;">+</p>
                        </div>
                    </li>
                </ul>
	        </div>
        </div>
    </div>
</div>

@if (addAccountPrompt)
{
    <NewAccountPrompt AccountService="_accountService" Close="() => {addAccountPrompt=false; InvokeAsync(()=>StateHasChanged()); LoadList();}"></NewAccountPrompt>
}

@if (editAccountTarget is not null)
{
    <AccountEditModal Account="editAccountTarget" AccountService="_accountService" Close="() => {editAccountTarget = null; InvokeAsync(() => StateHasChanged());}"></AccountEditModal>
}