@using AccountManager.Core.Interfaces
@inject IAccountExportService _accountExportService;
@inject IAppState _appState;
@inject NavigationManager uriHelper;

<div class="sidebar-shrink" @onclick="ToggleNavMenu">
	<nav class="flex-column">
		<div class="collapse show">
			<div class="nav-item px-3">
				<NavLink class="nav-link nav-button" @onclick="ToggleFilterSidebar" Match="NavLinkMatch.All">
					<span class="oi oi-magnifying-glass" aria-hidden="true" title="Filters"></span>
				</NavLink>
			</div>
		</div>

		<div class="nav-item px-3">
			<NavLink @onclick="ToggleSettingsModal" class="nav-link nav-button">
				<span class="oi oi-cog" aria-hidden="true" title="Settings"></span>
			</NavLink>
		</div>

		<div class="nav-item px-3">
			<NavLink @onclick="Import" class="nav-link nav-button">
				<span class="oi oi-data-transfer-download" aria-label="Import" title="Import"></span>
			</NavLink>
		</div>
	</nav>
</div>

@if (showImportModal)
{
	<AccountManager.Blazor.Components.Modals.ImportExportAccountModal.ImportAccountsModal Close="@(() => { showImportModal = false; uriHelper.NavigateTo("/reload"); })"></AccountManager.Blazor.Components.Modals.ImportExportAccountModal.ImportAccountsModal>
}

@code {
	[Parameter]
	public Action ToggleFilterSidebar { get; set; } = delegate { };
	[Parameter]
	public Action ToggleSettingsModal { get; set; } = delegate { };
	private bool collapseNavMenu = true;
	private bool showImportModal = false;

	private void ToggleNavMenu()
	{
		collapseNavMenu = !collapseNavMenu;
	}

	private void Import()
	{
		showImportModal = true;
	}
}
